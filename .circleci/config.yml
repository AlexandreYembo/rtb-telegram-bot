version: 2.1
defaults: &defaults
  environment:
    PROJECT: realtime-bus
    BOT_NAME: RealTimeBot.js
    GIT_COMMIT_DESC: $(git log --format=oneline -n 1 ${CIRCLE_SHA1})
    SCRIPTS_FOLDER: ${CIRCLE_WORKING_DIRECTORY}/_scripts
  docker:
     - image: circleci/node:10.16.0
only-user-acceptance: &only-user-acceptance
  filters:
    branches:
      only:
        - user-acceptance
only-releasable: &only-releasable
  filters:
    branches:
      only:
        - develop
        - patch
non-releasable: &non-releasable
  filters:
    branches:
      ignore:
        - master
        - develop
        - patch
        
jobs:
  build-app:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Build Project
          command: |
            #cd ${PROJECT}
            npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
  test-app:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Bot Test
          command: |
            export GIT_COMMIT_DESC="$(git log --format=oneline -n 1 $CIRCLE_SHA1)" >> ${BASH_ENV}
            echo "-------------${GIT_COMMIT_DESC}"
            #the following regex represents master and patch matcches
            branch_regex='[mp][a][st][tc][eh]*'
            skip_test_regex='[\[skip test\]]'
            
            #if master or patch then dont need to turn the bot on
            if [[ ${CIRCLE_BRANCH} != ${branch_regex} ]]; then
              RTB_BOT_TOKEN=${RTB_BOT_TOKEN_DEV}

              message="I am online for about 8 minutes for testing\n"
              message+="From branch: ${CIRCLE_BRANCH}"
              curl -X POST \
                    -d chat_id=${GROUP_TELEGRAM_ID} \
                    -d text="$(echo -e ${message})" \
                    https://api.telegram.org/bot${RTB_BOT_TOKEN}/sendMessage
              
              sed -i 's/${RTB_BOT_TOKEN}/'${RTB_BOT_TOKEN}/ config.json
              
              #Bot will run for 8 min for testing
              #8 min because circleCi will automatically fail on timeout in 10 min
              timeout 480 node ${BOT_NAME} || true

              message="I am shutting down now\n"
              message+="Thanks for testing!\n\n"
              message+="If you want to run the same test, trigger the following url again...\n"
              message+="https://circleci.com/gh/realtime-bus/node-telegram-bot/${CIRCLE_BUILD_NUM}"
              curl -X POST \
                    -d chat_id=${GROUP_TELEGRAM_ID} \
                    -d text="$(echo -e ${message})" \
                    https://api.telegram.org/bot${RTB_BOT_TOKEN}/sendMessage
            
            elif [[ ${GIT_COMMIT_DESC} =~ ${skip_test_regex} ]]; then
              RTB_BOT_TOKEN=${RTB_BOT_TOKEN_DEV}
              message="Test skipped by the user"
              curl -X POST \
                    -d chat_id=${GROUP_TELEGRAM_ID} \
                    -d text="$(echo -e ${message})" \
                    https://api.telegram.org/bot${RTB_BOT_TOKEN}/sendMessage
            else
              RTB_BOT_TOKEN=${RTB_BOT_TOKEN_PROD}
              
              message="Test passed on branch: ${CIRCLE_BRANCH}"
              curl -X POST \
                    -d chat_id=${GROUP_TELEGRAM_ID} \
                    -d text="$(echo -e ${message})" \
                    https://api.telegram.org/bot${RTB_BOT_TOKEN}/sendMessage
            fi

  prepare-dev-deploy:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "15:57:cd:30:2c:b6:f3:16:7b:db:9b:fc:12:95:4a:1e"
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Prepare Dev Environment
          command: |
            pwd
            export
            ls
            echo "__+_+_+_+ ${GIT_COMMIT_DESC}"
            source ${SCRIPTS_FOLDER}/increment_version.sh
            increment.version -m 10.0.130

  prepare-uat-deploy:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Prepare Uat Environment
          command: |
            npm --verbose test || true
  deploy-dev:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Deploy to Dev Environment
          command: |
            npm --verbose test || true

  deploy-uat:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Deploy to Uat Environment
          command: |
            npm --verbose test || true
  pre-prod:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Deploy to Pre Prod Environment
          command: |
            RTB_BOT_TOKEN=${RTB_BOT_TOKEN_PROD}
            GROUP_TELEGRAM_ID=${PROD_GROUP_TELEGRAM_ID}
            npm --verbose test || true

  prod-promotion:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Prod Promotion
          command: |
            RTB_BOT_TOKEN=${RTB_BOT_TOKEN_PROD}
            GROUP_TELEGRAM_ID=${PROD_GROUP_TELEGRAM_ID}
            npm --verbose test || true
            
workflows:
  version: 2.1
  realtime-bus-workflow:
    jobs:
      - build-app
      - test-app:
          requires:
            - build-app
      - prepare-dev-deploy:
          <<: *non-releasable
          requires:
            - test-app
      - prepare-uat-deploy:
          <<: *only-user-acceptance
          requires:
            - test-app
      - deploy-dev:
          requires:
            - prepare-dev-deploy
      - deploy-uat:
          <<: *only-user-acceptance
          requires:
            - prepare-uat-deploy
      - pre-prod:
          <<: *only-releasable
          requires:
            - test-app
      - prod-promotion:
          type: approval
          requires:
            - pre-prod
          filters:
            branches:
              only:
                - master
